@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

/* Theme variables are handled by Tailwind CSS v4 automatically */

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

@layer utilities {
  .copyleft {
    display: inline-block;
    transform: scaleX(-1);
  }

  /* Liquid Glass Effect Utilities */
  .glass {
    position: relative;
    background: transparent;
    overflow: hidden;
    isolation: isolate;
  }

  .glass > * {
    position: relative;
    z-index: 1;
  }

  .glass::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    overflow: hidden;
    border-radius: inherit;
    box-shadow: 
      inset 2px 2px 0px -2px rgba(255, 255, 255, 0.7), 
      inset 0 0 3px 1px rgba(255, 255, 255, 0.7);
    background-color: rgb(255 255 255 / 50%);
  }

  .glass::after {
    content: '';
    position: absolute;
    z-index: -1;
    inset: 0;
    border-radius: inherit;
    backdrop-filter: blur(0px);
    filter: url(#liquid-glass);
    overflow: hidden;
    isolation: isolate;
  }

  /* Dark mode variant */
  .dark .glass::before {
    box-shadow: 
      inset 2px 2px 0px -2px rgba(255, 255, 255, 0.1), 
      inset 0 0 3px 1px rgba(255, 255, 255, 0.1);
    background-color: rgb(255 255 255 / 10%);
  }

  /* Glass variants */
  .glass-sm::before {
    box-shadow: 
      inset 1px 1px 0px -1px rgba(255, 255, 255, 0.6), 
      inset 0 0 2px 1px rgba(255, 255, 255, 0.6);
  }

  .glass-lg::before {
    box-shadow: 
      inset 3px 3px 0px -3px rgba(255, 255, 255, 0.8), 
      inset 0 0 4px 2px rgba(255, 255, 255, 0.8);
  }

  /* Hover effects */
  .glass-hover:hover::before {
    background-color: rgb(255 255 255 / 25%);
    box-shadow: 
      inset 2px 2px 0px -2px rgba(255, 255, 255, 0.8), 
      inset 0 0 4px 2px rgba(255, 255, 255, 0.8);
  }

  .dark .glass-hover:hover::before {
    background-color: rgb(255 255 255 / 15%);
    box-shadow: 
      inset 2px 2px 0px -2px rgba(255, 255, 255, 0.15), 
      inset 0 0 4px 2px rgba(255, 255, 255, 0.15);
  }
}

@font-face {
  font-family: "RedHatTextVar";
  src: url("/fonts/subset/RedHatTextVarLatinSubsetBasic.woff2") format("woff2-variations");
  font-weight: 400 700;
  font-display: swap;
}

@font-face {
  font-family: "RemiliaMincho";
  src: url("/fonts/RemiliaMincho-Regular.otf") format("opentype");
  font-weight: 400;
  font-display: swap;
}

body {
  font-family: "RedHatTextVar", var(--font-geist-sans), sans-serif;
}

.font-remilia {
  font-family: "RemiliaMincho", serif;
}

.bg-tartan-blur {
  background-image: url('/patterns/remiliatartan.jpeg');
  background-size: 250px;
  filter: blur(15px);
  opacity: 0.35;
}

/* Loader keyframes */
@keyframes fillBar {
  0% { width: 0%; }
  100% { width: 100%; }
}

.animate-loader {
  animation: fillBar 1s forwards ease-out;
}

@media (prefers-reduced-motion: reduce) {
  .animate-loader {
    animation: none;
    width: 100%;
  }
}

/* NProgress overrides */
@import "nprogress/nprogress.css";

#nprogress {
  pointer-events: none;
}

#nprogress .bar {
  background: #B71E34 !important;
  height: 3px !important;
}

#nprogress .peg {
  box-shadow: none !important;
}

@media (prefers-reduced-motion: reduce) {
  #nprogress .bar {
    transition: none !important;
  }
}

/* Link underline slide animation */
a.link-underline {
  position: relative;
  text-decoration: none;
}

a.link-underline::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 0%;
  height: 1px;
  background: currentColor;
  transition: width 0.25s ease;
}

a.link-underline:hover::after {
  width: 100%;
}

@media (prefers-reduced-motion: reduce) {
  a.link-underline::after {
    transition: none;
  }
}

/* Prism â€” Solarized Dark variant */
pre[class*="language-"] {
  border-radius: 0.375rem;
  padding: 1rem;
  overflow-x: auto;
  font-size: 0.875rem;
  line-height: 1.625;
  font-family: ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono", Menlo, monospace;
  background: #002b36; /* base03 */
  color: #839496;     /* base0  */
}

/* Tokens */
.token.comment, .token.prolog, .token.doctype, .token.cdata {
  color: #586e75; /* base01 */
}
.token.punctuation { color: #93a1a1; }
.token.property, .token.tag, .token.constant, .token.symbol, .token.deleted {
  color: #dc322f; /* red */
}
.token.boolean, .token.number { color: #d33682; /* magenta */ }
.token.selector, .token.attr-name, .token.string, .token.char, .token.builtin, .token.inserted {
  color: #2aa198; /* cyan */
}
.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string, .token.variable {
  color: #cb4b16; /* orange */
}
.token.atrule, .token.attr-value, .token.function, .token.class-name {
  color: #268bd2; /* blue */
}
.token.keyword { color: #859900; /* green */ }
.token.regex, .token.important {
  color: #b58900; /* yellow */
}
.token.bold { font-weight: bold; }
.token.italic { font-style: italic; }
.token.entity { cursor: help; }

/* Embed code block within prose */
@layer utilities {
  .prose :where(pre):not(:where([class~="not-prose"] *)) {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
}
